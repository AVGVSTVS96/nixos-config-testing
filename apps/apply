#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the architecture
ARCH=$(uname -m)
if [[ "$ARCH" == "arm64" ]]; then
  SYSTEM_TYPE="aarch64-darwin"
else
  SYSTEM_TYPE="x86_64-darwin"
fi

# Custom print function
_print() {
  echo -e "$1"
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read -r $variable
}

insert_secrets_output() {
  local pattern="outputs = { self, darwin, nix-homebrew, homebrew-bundle, homebrew-core, homebrew-cask, home-manager, nixpkgs, disko } @inputs:"
  local insert_text="secrets "

  awk -v pat="$pattern" -v insert="$insert_text" '
    $0 ~ pat {
      sub(/} @inputs:/, ", " insert "} @inputs:");
      gsub(/ ,/, ",");
      print
      next
    }
    { print }
  ' flake.nix > flake.nix.tmp

  mv flake.nix.tmp flake.nix
}

insert_secrets_input() {
  FILE_PATH="flake.nix"
  cp "$FILE_PATH" "${FILE_PATH}.bak"
  TEMP_FILE="temp_insert.txt"

  cat > "$TEMP_FILE" << 'EOF'
    secrets = {
      url = "git+ssh://git@github.com/%GITHUB_USER%/%GITHUB_SECRETS_REPO%.git";
      flake = false;
    };
EOF

  if grep -q 'url = "git+ssh://git@github.com/%GITHUB_USER%/%GITHUB_SECRETS_REPO%.git"' "$FILE_PATH"; then
      echo "The 'secrets' block already exists in the file."
      rm "$TEMP_FILE"
      rm "${FILE_PATH}.bak"
      exit 0
  fi

  START_LINE=$(grep -n 'disko = {' "$FILE_PATH" | head -n 1 | cut -d: -f1)
  END_LINE=$(tail -n +$START_LINE "$FILE_PATH" | grep -n '};' | head -n 1 | cut -d: -f1)
  END_LINE=$((START_LINE + END_LINE - 1))

  {
      sed -n "1,${END_LINE}p" "$FILE_PATH"
      cat "$TEMP_FILE"
      sed -n "$((END_LINE + 1)),\$p" "$FILE_PATH"
  } > "${FILE_PATH}.new"

  mv "${FILE_PATH}.new" "$FILE_PATH"

  rm "$TEMP_FILE"
  rm "${FILE_PATH}.bak"
}

ask_for_star() {
  _print "${YELLOW}Would you like to support my work by starring my GitHub repo? yes/no [yes]: ${NC}"
  local response
  read -r response
  response=${response:-yes}
  if [[ "$response" =~ ^[Yy](es)?$ ]] || [[ -z "$response" ]]; then
    open "https://github.com/dustinlyons/nixos-config"
  fi
}

ask_for_star

export USERNAME=$(whoami)

# Check if git is available
if command -v git >/dev/null 2>&1; then
  export GIT_EMAIL=$(git config --get user.email)
  export GIT_NAME=$(git config --get user.name)
else
  _print "${RED}Git is not available on this system.${NC}"
fi

if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
fi

_prompt "${YELLOW}Please enter your Github username: ${NC}" GITHUB_USER
_prompt "${YELLOW}Please enter your Github secrets repository name: ${NC}" GITHUB_SECRETS_REPO

export GITHUB_USER
export GITHUB_SECRETS_REPO

confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"
  _print "${GREEN}Secrets repository: $GITHUB_USER/$GITHUB_SECRETS_REPO${NC}"

  _prompt "${YELLOW}Is this correct? yes/no: ${NC}" choice

  case "$choice" in
  [Nn] ) _print "${RED}Exiting script.${NC}" && exit 1;;
  [Yy] ) _print "${GREEN}Continuing...${NC}";;
  * ) _print "${RED}Invalid option. Exiting script.${NC}" && exit 1;;
  esac
}

confirm_details

replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
    LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
    LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
    LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
    LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
  fi
}

insert_secrets_input
insert_secrets_output

export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"